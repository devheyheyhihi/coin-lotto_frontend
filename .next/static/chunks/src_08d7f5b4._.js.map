{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 10, "column": 0}, "map": {"version":3,"sources":["file:///Users/sinseonghyeon/Documents/GitHub/01-blockchain-projects/maxpia-project/coin_lotto/frontend/src/app/page.tsx"],"sourcesContent":["'use client';\n\nimport { useState, useEffect, useCallback, useRef } from 'react';\nimport { ethers } from 'ethers';\nimport Link from 'next/link';\nimport lotteryABIFile from '../abis/Lottery.json';\n\n// --- Constants ---\nconst BNB_CHAIN_ID = '0x61';\nconst LOTTERY_CONTRACT_ADDRESS = '0x7607b6009267e6d64a76740686a74AEAE8EB06ce';\nconst USDT_CONTRACT_ADDRESS = '0x337610d27c682E347C9cD60BD4b3b107C9d34dDd';\nconst API_BASE_URL = 'http://localhost:3001';\nconst usdtABI = [\n    \"function approve(address spender, uint256 amount) public returns (bool)\",\n    \"function allowance(address owner, address spender) public view returns (uint256)\",\n    \"function balanceOf(address account) public view returns (uint256)\",\n    \"function transfer(address to, uint256 amount) public returns (bool)\",\n    \"function transferFrom(address from, address to, uint256 amount) public returns (bool)\",\n    \"function name() public view returns (string)\",\n    \"function symbol() public view returns (string)\",\n    \"function decimals() public view returns (uint8)\"\n];\nconst lotteryABI = lotteryABIFile.abi; // Extract only the abi array\n\n// --- Type Definitions ---\ndeclare global { interface Window { ethereum?: any; }}\n\ninterface LogEntry {\n    id: number;\n    type: 'JOIN' | 'SYSTEM' | 'WINNER' | 'ERROR' | 'INFO' | 'PROCESS';\n    message: string;\n    timestamp: string;\n}\n\ninterface LotteryRound {\n    id: number;\n    status: 'OPEN' | 'DRAWING' | 'CLOSED';\n    players: string[];\n    players_snapshot: string | null;\n    winner: string | null;\n    prizePool: string | null;\n    logs: LogEntry[];\n}\n\n// --- Main Component ---\nexport default function Home() {\n  const [account, setAccount] = useState<string | null>(null);\n  const [isCorrectNetwork, setIsCorrectNetwork] = useState(false);\n  const [isOwner, setIsOwner] = useState(false);\n    const [isProcessing, setIsProcessing] = useState(false);\n    const [lotteryStatus, setLotteryStatus] = useState<LotteryRound | null>(null);\n    const [displayedLogs, setDisplayedLogs] = useState<LogEntry[]>([]);\n    const [error, setError] = useState<string | null>(null);\n    const [isAnimationRunning, setIsAnimationRunning] = useState(false);\n    const [hasAnimationRun, setHasAnimationRun] = useState(false);\n\n    const prevRoundIdRef = useRef<number | null>(null);\n    const logContainerRef = useRef<HTMLDivElement>(null);\n    \n    useEffect(() => {\n        if (lotteryStatus && lotteryStatus.id !== prevRoundIdRef.current) {\n            setHasAnimationRun(false); // New round, reset animation flag\n            prevRoundIdRef.current = lotteryStatus.id;\n        }\n    }, [lotteryStatus]);\n\n\n    // --- Utility: Auto-scroll logs ---\n    useEffect(() => {\n        if (logContainerRef.current) {\n            logContainerRef.current.scrollTop = logContainerRef.current.scrollHeight;\n        }\n    }, [displayedLogs]);\n\n    const addFrontendLog = useCallback((type: LogEntry['type'], message: string) => {\n        // Use a random negative number for frontend-only logs to avoid collision with DB IDs\n        // and to allow sorting by timestamp primarily.\n        const newLog: LogEntry = { id: Math.random() * -100000, type, message, timestamp: new Date().toISOString() };\n        setDisplayedLogs(prev => [...prev, newLog]);\n    }, []);\n\n    // --- State & Data Fetching ---\n    const fetchStatus = useCallback(async () => {\n        if (isAnimationRunning) return; \n        try {\n            const response = await fetch(`${API_BASE_URL}/lottery-status`);\n            if (!response.ok) throw new Error('Network response was not ok');\n            const data: LotteryRound = await response.json();\n            \n            setLotteryStatus(data);\n            \n            // Log management is now simpler: just add new logs.\n            // Clearing is handled by the closing sequence after a draw.\n            setDisplayedLogs(prevLogs => {\n                const existingIds = new Set(prevLogs.map(l => l.id));\n                let newLogs = data.logs.filter(log => !existingIds.has(log.id));\n\n                // While drawing, hide the winner log until the animation is complete\n                if (data.status === 'DRAWING' || isAnimationRunning) {\n                   newLogs = newLogs.filter(log => log.type !== 'WINNER');\n                }\n\n                return [...prevLogs, ...newLogs].sort((a,b) => new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime());\n            });\n\n        } catch (error) {\n            console.error(\"Failed to fetch lottery status:\", error);\n            setError('Failed to connect to server.');\n        }\n    }, [isAnimationRunning]);\n\n    // --- Web3 Callbacks & Lifecycle ---\n  const checkNetwork = useCallback(async () => {\n    if (window.ethereum) {\n        const chainId = await window.ethereum.request({ method: 'eth_chainId' });\n        setIsCorrectNetwork(chainId === BNB_CHAIN_ID);\n    }\n  }, []);\n\n    const checkOwner = useCallback(async (currentAccount: string) => {\n        if (window.ethereum && currentAccount && isCorrectNetwork) {\n            const provider = new ethers.BrowserProvider(window.ethereum);\n            const contract = new ethers.Contract(LOTTERY_CONTRACT_ADDRESS, lotteryABI, provider);\n            const ownerAddress = await contract.owner();\n            setIsOwner(ownerAddress.toLowerCase() === currentAccount.toLowerCase());\n        } else {\n            setIsOwner(false);\n        }\n    }, [isCorrectNetwork]);\n\n    useEffect(() => {\n        const handleAccountsChanged = (accounts: string[]) => {\n            const newAccount = accounts.length > 0 ? accounts[0] : null;\n            setAccount(newAccount);\n            if (newAccount) checkOwner(newAccount); else setIsOwner(false);\n        };\n        if (window.ethereum) {\n            window.ethereum.on('accountsChanged', handleAccountsChanged);\n            window.ethereum.on('chainChanged', checkNetwork);\n            (async () => {\n                const accounts = await window.ethereum.request({ method: 'eth_accounts' });\n                handleAccountsChanged(accounts);\n                await checkNetwork();\n            })();\n            return () => {\n                window.ethereum.removeListener('accountsChanged', handleAccountsChanged);\n                window.ethereum.removeListener('chainChanged', checkNetwork);\n            };\n        }\n    }, [checkNetwork, checkOwner]);\n\n    // --- Main Drawing and Polling Logic ---\n    useEffect(() => {\n        // Condition to start the animation\n        if (lotteryStatus?.status === 'DRAWING' && !isAnimationRunning && !hasAnimationRun) {\n            setIsAnimationRunning(true);\n            setHasAnimationRun(true); // Mark that animation has run for this round\n\n            const runDrawingSequence = async () => {\n                // 1. Countdown\n                addFrontendLog('SYSTEM', 'Draw starting in 3...');\n                await new Promise(res => setTimeout(res, 1000));\n                addFrontendLog('SYSTEM', 'Draw starting in 2...');\n                await new Promise(res => setTimeout(res, 1000));\n                addFrontendLog('SYSTEM', 'Draw starting in 1...');\n                await new Promise(res => setTimeout(res, 1000));\n                \n                // 2. Scrolling Animation\n                const players = lotteryStatus.players_snapshot ? JSON.parse(lotteryStatus.players_snapshot) : [];\n                if (players.length > 0) {\n                    const animationDuration = 5000; // 5 seconds of scrolling\n                    const startTime = Date.now();\n                    \n                    const animationInterval = setInterval(() => {\n                         if (Date.now() - startTime > animationDuration) {\n                            clearInterval(animationInterval);\n                            \n                            // --- Round Closing Sequence ---\n                            const closeRound = async () => {\n                                addFrontendLog('SYSTEM', 'Verification complete. Announcing winner...');\n                                \n                                // Reveal the winner log from the server data\n                                const winnerLog = lotteryStatus.logs.find(l => l.type === 'WINNER');\n                                if (winnerLog) {\n                                    setDisplayedLogs(prev => [...prev, winnerLog]);\n                                } else if (lotteryStatus.winner) {\n                                    addFrontendLog('WINNER', `ðŸŽ‰ Congratulations to the winner: ${lotteryStatus.winner}`);\n                                }\n\n                                // Wait a moment for the user to see the winner\n                                await new Promise(res => setTimeout(res, 3000));\n\n                                addFrontendLog('SYSTEM', 'This round is now closed. A new round will begin shortly.');\n                                \n                                // Countdown before clearing logs\n                                for (let i = 5; i > 0; i--) {\n                                    addFrontendLog('SYSTEM', `Clearing board in ${i}...`);\n                                    await new Promise(res => setTimeout(res, 1000));\n                                }\n\n                                setDisplayedLogs([]); // Clear all logs\n                                setIsAnimationRunning(false); // Allow polling to fetch the new round\n                            };\n                            closeRound();\n                        } else {\n                            const randomIndex = Math.floor(Math.random() * players.length);\n                            addFrontendLog('PROCESS', `Verifying: ${players[randomIndex]}`);\n                        }\n                    }, 100);\n                } else {\n                     addFrontendLog('ERROR', 'No participants in the draw.');\n                     setIsAnimationRunning(false);\n                }\n            };\n            runDrawingSequence();\n        }\n    }, [lotteryStatus, isAnimationRunning, hasAnimationRun, addFrontendLog]);\n\n\n    useEffect(() => {\n        fetchStatus(); // Initial fetch\n        const interval = setInterval(() => {\n            if (!isAnimationRunning) {\n                fetchStatus();\n            }\n        }, 3000); // Poll slightly faster to catch state changes\n        return () => clearInterval(interval);\n    }, [fetchStatus, isAnimationRunning]);\n  \n    // --- User Actions ---\n    const connectWallet = async () => {\n        if (!window.ethereum) return setError('Please install MetaMask.');\n        try {\n            const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n            setAccount(accounts[0]);\n        } catch (error) {\n            setError('Failed to connect wallet.');\n        }\n    };\n\n    const handleParticipate = async () => {\n        if (!account || !isCorrectNetwork) return;\n        setIsProcessing(true);\n        setError(null);\n        try {\n            const provider = new ethers.BrowserProvider(window.ethereum);\n            const signer = await provider.getSigner();\n            const usdtContract = new ethers.Contract(USDT_CONTRACT_ADDRESS, usdtABI, signer);\n            const lotteryContract = new ethers.Contract(LOTTERY_CONTRACT_ADDRESS, lotteryABI, signer);\n            const participationFee = ethers.parseUnits(\"0.01\", 18);\n            \n            // Check USDT balance first\n            const balance = await usdtContract.balanceOf(account);\n            if (balance < participationFee) {\n                throw new Error(`Insufficient USDT balance. You have ${ethers.formatUnits(balance, 18)} USDT, but need 0.01 USDT.`);\n            }\n            \n            // Check allowance\n            const allowance = await usdtContract.allowance(account, LOTTERY_CONTRACT_ADDRESS);\n            console.log(`Current allowance: ${ethers.formatUnits(allowance, 18)} USDT`);\n            \n            if (allowance < participationFee) {\n                console.log('Approving USDT...');\n                const approveTx = await usdtContract.approve(LOTTERY_CONTRACT_ADDRESS, ethers.MaxUint256);\n                await approveTx.wait();\n                console.log('USDT approved successfully');\n            }\n            \n            console.log('Participating in lottery...');\n            const participateTx = await lotteryContract.participate();\n            await participateTx.wait();\n            console.log('Participation successful');\n            \n            await fetch(`${API_BASE_URL}/participate`, {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({ userAddress: account })\n            });\n            await fetchStatus();\n        } catch (error: any) {\n            console.error('Participation error:', error);\n            let errorMessage = 'Participation failed';\n            if (error.reason) {\n                errorMessage += `: ${error.reason}`;\n            } else if (error.message) {\n                errorMessage += `: ${error.message}`;\n            } else if (error.error?.message) {\n                errorMessage += `: ${error.error.message}`;\n            }\n            setError(errorMessage);\n        } finally {\n            setIsProcessing(false);\n        }\n    };\n\n  return (\n        <div className=\"flex h-screen bg-gray-900 text-white font-sans\">\n      {isProcessing && (\n        <div className=\"absolute inset-0 bg-black bg-opacity-70 flex flex-col justify-center items-center z-50\">\n            <div className=\"w-16 h-16 border-4 border-yellow-400 border-t-transparent rounded-full animate-spin\"></div>\n            <p className=\"mt-4 text-white text-xl font-semibold\">Processing Transaction...</p>\n        </div>\n      )}\n            {/* Left Panel */}\n            <div className=\"w-1/3 border-r border-gray-700 flex flex-col p-4\">\n                <h1 className=\"text-3xl font-bold mb-4\">Lotto Game</h1>\n                <div className=\"text-lg text-yellow-400 mb-4\">\n                    Prize Pool: <span className=\"font-bold\">{parseFloat(lotteryStatus?.prizePool || '0').toFixed(4)}</span> USDT\n                </div>\n                <div className=\"mb-4\">\n        {account ? (\n                        <div className=\"flex items-center justify-between\">\n                            <span className=\"text-sm bg-green-500 rounded px-2 py-1\">{`${account.substring(0, 6)}...${account.substring(account.length - 4)}`}</span>\n                            {isOwner && <Link href=\"/admin\" className=\"text-sm bg-red-600 rounded px-2 py-1\">Admin</Link>}\n                             <Link href=\"/history\" className=\"text-sm bg-blue-600 rounded px-2 py-1\">History</Link>\n          </div>\n        ) : (\n                        <button onClick={connectWallet} className=\"w-full bg-blue-600 p-2 rounded\">Connect Wallet</button>\n                )}\n            </div>\n                 {error && <p className=\"text-red-500 text-xs my-2\">{error}</p>}\n                <button\n                    onClick={handleParticipate}\n                    disabled={isProcessing || lotteryStatus?.status !== 'OPEN' || !account || !isCorrectNetwork}\n                    className=\"w-full bg-yellow-500 text-black font-bold p-3 rounded disabled:bg-gray-600\"\n                >\n                    {lotteryStatus?.status === 'OPEN' ? 'Participate (0.01 USDT)' : `Round is ${lotteryStatus?.status || 'Loading...'}`}\n                </button>\n                <h2 className=\"text-xl font-bold mt-6 mb-2\">Participants ({lotteryStatus?.players?.length || 0})</h2>\n                <div className=\"bg-gray-800 rounded p-2 flex-grow overflow-y-auto\">\n                    {lotteryStatus?.players?.map((player, index) => <div key={index} className=\"text-sm truncate font-mono\">{player}</div>)}\n                </div>\n            </div>\n\n            {/* Right Panel */}\n            <div className=\"w-2/3 flex flex-col h-full\">\n                <div ref={logContainerRef} className=\"flex-grow p-4 bg-black font-mono text-sm h-full overflow-y-auto\">\n                    {displayedLogs.map((log, i) => (\n                        <div key={log.id || i} className={`${\n                            log.type === 'WINNER' ? 'text-yellow-400 font-bold text-lg' \n                            : log.type === 'ERROR' ? 'text-red-500' \n                            : log.type === 'JOIN' ? 'text-blue-400'\n                            : log.type === 'PROCESS' ? 'text-green-400'\n                            : 'text-gray-400'\n                        }`}>\n                            <span className=\"text-gray-600 mr-2\">{new Date(log.timestamp).toLocaleTimeString()}</span>\n                            <span>{log.message}</span>\n                        </div>\n                    ))}\n                </div>\n            </div>\n        </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}