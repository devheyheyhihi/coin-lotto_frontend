{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/sinseonghyeon/Documents/GitHub/01-blockchain-projects/maxpia-project/coin_lotto/frontend/src/app/page.tsx"],"sourcesContent":["'use client';\n\nimport { useState, useEffect, useCallback, useRef } from 'react';\nimport { ethers } from 'ethers';\nimport Link from 'next/link';\nimport lotteryABI from '../../../backend/smart-contract/artifacts/contracts/Lottery.sol/Lottery.json';\n\n// --- Constants ---\nconst BNB_CHAIN_ID = '0x61';\nconst LOTTERY_CONTRACT_ADDRESS = '0xeC6653e23410B139c489721f02eBbA2cCe2D4dAC';\nconst USDT_CONTRACT_ADDRESS = '0x337610d27c682E347C9cD60BD4b3b107C9d34dDd';\nconst API_BASE_URL = 'http://localhost:3001';\nconst usdtABI = [\"function approve(address spender, uint256 amount) public returns (bool)\", \"function allowance(address owner, address spender) public view returns (uint256)\"];\n\n// --- Type Definitions ---\ndeclare global { interface Window { ethereum?: any; }}\n\ninterface LogEntry {\n    id: number;\n    type: 'JOIN' | 'SYSTEM' | 'WINNER' | 'ERROR' | 'INFO' | 'PROCESS';\n    message: string;\n    timestamp: string;\n}\n\ninterface LotteryRound {\n    id: number;\n    status: 'OPEN' | 'DRAWING' | 'CLOSED';\n    players: string[];\n    players_snapshot: string | null;\n    winner: string | null;\n    prizePool: string | null;\n    logs: LogEntry[];\n}\n\n// --- Main Component ---\nexport default function Home() {\n    const [account, setAccount] = useState<string | null>(null);\n    const [isCorrectNetwork, setIsCorrectNetwork] = useState(false);\n    const [isOwner, setIsOwner] = useState(false);\n    const [isProcessing, setIsProcessing] = useState(false);\n    const [lotteryStatus, setLotteryStatus] = useState<LotteryRound | null>(null);\n    const [displayedLogs, setDisplayedLogs] = useState<LogEntry[]>([]);\n    const [error, setError] = useState<string | null>(null);\n    const [isAnimationRunning, setIsAnimationRunning] = useState(false);\n    const [hasAnimationRun, setHasAnimationRun] = useState(false);\n\n    const prevRoundIdRef = useRef<number | null>(null);\n    const logContainerRef = useRef<HTMLDivElement>(null);\n    \n    useEffect(() => {\n        if (lotteryStatus && lotteryStatus.id !== prevRoundIdRef.current) {\n            setHasAnimationRun(false); // New round, reset animation flag\n            // setDisplayedLogs([]); // DO NOT CLEAR LOGS FOR CONTINUITY\n            prevRoundIdRef.current = lotteryStatus.id;\n        }\n    }, [lotteryStatus]);\n\n\n    // --- Utility: Auto-scroll logs ---\n    useEffect(() => {\n        if (logContainerRef.current) {\n            logContainerRef.current.scrollTop = logContainerRef.current.scrollHeight;\n        }\n    }, [displayedLogs]);\n\n    const addFrontendLog = useCallback((type: LogEntry['type'], message: string) => {\n        const newLog: LogEntry = { id: Date.now(), type, message, timestamp: new Date().toISOString() };\n        setDisplayedLogs(prev => [...prev, newLog]);\n    }, []);\n\n    // --- State & Data Fetching ---\n    const fetchStatus = useCallback(async () => {\n        if (isAnimationRunning) return; \n        try {\n            const response = await fetch(`${API_BASE_URL}/lottery-status`);\n            if (!response.ok) throw new Error('Network response was not ok');\n            const data: LotteryRound = await response.json();\n            \n            setLotteryStatus(data);\n            \n            // Log management\n            setDisplayedLogs(prevLogs => {\n                const existingIds = new Set(prevLogs.map(l => l.id));\n                let newLogs = data.logs.filter(log => !existingIds.has(log.id));\n\n                // While drawing, hide the winner log until the animation is complete\n                if (data.status === 'DRAWING' || isAnimationRunning) {\n                   newLogs = newLogs.filter(log => log.type !== 'WINNER');\n                }\n\n                return [...prevLogs, ...newLogs].sort((a,b) => a.id - b.id);\n            });\n\n        } catch (error) {\n            console.error(\"Failed to fetch lottery status:\", error);\n            setError('Failed to connect to server.');\n        }\n    }, [isAnimationRunning]);\n\n    // --- Web3 Callbacks & Lifecycle ---\n    const checkNetwork = useCallback(async () => {\n        if (window.ethereum) {\n            const chainId = await window.ethereum.request({ method: 'eth_chainId' });\n            setIsCorrectNetwork(chainId === BNB_CHAIN_ID);\n        }\n    }, []);\n\n    const checkOwner = useCallback(async (currentAccount: string) => {\n        if (window.ethereum && currentAccount && isCorrectNetwork) {\n            const provider = new ethers.BrowserProvider(window.ethereum);\n            const contract = new ethers.Contract(LOTTERY_CONTRACT_ADDRESS, lotteryABI.abi, provider);\n            const ownerAddress = await contract.owner();\n            setIsOwner(ownerAddress.toLowerCase() === currentAccount.toLowerCase());\n        } else {\n            setIsOwner(false);\n        }\n    }, [isCorrectNetwork]);\n\n    useEffect(() => {\n        const handleAccountsChanged = (accounts: string[]) => {\n            const newAccount = accounts.length > 0 ? accounts[0] : null;\n            setAccount(newAccount);\n            if (newAccount) checkOwner(newAccount); else setIsOwner(false);\n        };\n        if (window.ethereum) {\n            window.ethereum.on('accountsChanged', handleAccountsChanged);\n            window.ethereum.on('chainChanged', checkNetwork);\n            (async () => {\n                const accounts = await window.ethereum.request({ method: 'eth_accounts' });\n                handleAccountsChanged(accounts);\n                await checkNetwork();\n            })();\n            return () => {\n                window.ethereum.removeListener('accountsChanged', handleAccountsChanged);\n                window.ethereum.removeListener('chainChanged', checkNetwork);\n            };\n        }\n    }, [checkNetwork, checkOwner]);\n\n    // --- Main Drawing and Polling Logic ---\n    useEffect(() => {\n        // Condition to start the animation\n        if (lotteryStatus?.status === 'DRAWING' && !isAnimationRunning && !hasAnimationRun) {\n            setIsAnimationRunning(true);\n            setHasAnimationRun(true); // Mark that animation has run for this round\n\n            const runDrawingSequence = async () => {\n                // 1. Countdown\n                addFrontendLog('SYSTEM', 'Draw starting in 3...');\n                await new Promise(res => setTimeout(res, 1000));\n                addFrontendLog('SYSTEM', 'Draw starting in 2...');\n                await new Promise(res => setTimeout(res, 1000));\n                addFrontendLog('SYSTEM', 'Draw starting in 1...');\n                await new Promise(res => setTimeout(res, 1000));\n                \n                // 2. Scrolling Animation\n                const players = lotteryStatus.players_snapshot ? JSON.parse(lotteryStatus.players_snapshot) : [];\n                if (players.length > 0) {\n                    const animationDuration = 5000; // 5 seconds of scrolling\n                    const startTime = Date.now();\n                    \n                    const animationInterval = setInterval(() => {\n                         if (Date.now() - startTime > animationDuration) {\n                            clearInterval(animationInterval);\n                            addFrontendLog('SYSTEM', 'Verification complete. Announcing winner...');\n                            \n                            // Reveal the winner log from the server\n                            const winnerLog = lotteryStatus.logs.find(l => l.type === 'WINNER');\n                            if(winnerLog) {\n                                setDisplayedLogs(prev => [...prev, winnerLog]);\n                            } else {\n                                // If for some reason the winner log isn't there, add a placeholder\n                                addFrontendLog('WINNER', `ðŸŽ‰ Congratulations to the winner: ${lotteryStatus.winner}`);\n                            }\n                            \n                            setIsAnimationRunning(false); // End of animation\n                        } else {\n                            const randomIndex = Math.floor(Math.random() * players.length);\n                            addFrontendLog('PROCESS', `Verifying: ${players[randomIndex]}`);\n                        }\n                    }, 100);\n                } else {\n                     addFrontendLog('ERROR', 'No participants in the draw.');\n                     setIsAnimationRunning(false);\n                }\n            };\n            runDrawingSequence();\n        }\n    }, [lotteryStatus, isAnimationRunning, hasAnimationRun, addFrontendLog]);\n\n\n    useEffect(() => {\n        fetchStatus(); // Initial fetch\n        const interval = setInterval(() => {\n            if (!isAnimationRunning) {\n                fetchStatus();\n            }\n        }, 3000); // Poll slightly faster to catch state changes\n        return () => clearInterval(interval);\n    }, [fetchStatus, isAnimationRunning]);\n\n    // --- User Actions ---\n    const connectWallet = async () => {\n        if (!window.ethereum) return setError('Please install MetaMask.');\n        try {\n            const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n            setAccount(accounts[0]);\n        } catch (error) {\n            setError('Failed to connect wallet.');\n        }\n    };\n\n    const handleParticipate = async () => {\n        if (!account || !isCorrectNetwork) return;\n        setIsProcessing(true);\n        setError(null);\n        try {\n            const provider = new ethers.BrowserProvider(window.ethereum);\n            const signer = await provider.getSigner();\n            const usdtContract = new ethers.Contract(USDT_CONTRACT_ADDRESS, usdtABI, signer);\n            const lotteryContract = new ethers.Contract(LOTTERY_CONTRACT_ADDRESS, lotteryABI.abi, signer);\n            const participationFee = ethers.parseUnits(\"0.01\", 18);\n            const allowance = await usdtContract.allowance(account, LOTTERY_CONTRACT_ADDRESS);\n\n            if (allowance < participationFee) {\n                const approveTx = await usdtContract.approve(LOTTERY_CONTRACT_ADDRESS, ethers.MaxUint256);\n                await approveTx.wait();\n            }\n            const participateTx = await lotteryContract.participate();\n            await participateTx.wait();\n            \n            await fetch(`${API_BASE_URL}/participate`, {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({ userAddress: account })\n            });\n            await fetchStatus();\n        } catch (error: any) {\n            setError(`Participation failed: ${error.reason || error.message}`);\n        } finally {\n            setIsProcessing(false);\n        }\n    };\n    \n    return (\n        <div className=\"flex h-screen bg-gray-900 text-white font-sans\">\n            {isProcessing && (\n                <div className=\"absolute inset-0 bg-black bg-opacity-70 flex flex-col justify-center items-center z-50\">\n                    <div className=\"w-16 h-16 border-4 border-yellow-400 border-t-transparent rounded-full animate-spin\"></div>\n                    <p className=\"mt-4 text-white text-xl font-semibold\">Processing Transaction...</p>\n                </div>\n            )}\n            {/* Left Panel */}\n            <div className=\"w-1/3 border-r border-gray-700 flex flex-col p-4\">\n                <h1 className=\"text-3xl font-bold mb-4\">Lotto Game</h1>\n                <div className=\"text-lg text-yellow-400 mb-4\">\n                    Prize Pool: <span className=\"font-bold\">{parseFloat(lotteryStatus?.prizePool || '0').toFixed(4)}</span> USDT\n                </div>\n                <div className=\"mb-4\">\n                    {account ? (\n                        <div className=\"flex items-center justify-between\">\n                            <span className=\"text-sm bg-green-500 rounded px-2 py-1\">{`${account.substring(0, 6)}...${account.substring(account.length - 4)}`}</span>\n                            {isOwner && <Link href=\"/admin\" className=\"text-sm bg-red-600 rounded px-2 py-1\">Admin</Link>}\n                             <Link href=\"/history\" className=\"text-sm bg-blue-600 rounded px-2 py-1\">History</Link>\n                        </div>\n                    ) : (\n                        <button onClick={connectWallet} className=\"w-full bg-blue-600 p-2 rounded\">Connect Wallet</button>\n                    )}\n                </div>\n                 {error && <p className=\"text-red-500 text-xs my-2\">{error}</p>}\n                <button\n                    onClick={handleParticipate}\n                    disabled={isProcessing || lotteryStatus?.status !== 'OPEN' || !account || !isCorrectNetwork}\n                    className=\"w-full bg-yellow-500 text-black font-bold p-3 rounded disabled:bg-gray-600\"\n                >\n                    {lotteryStatus?.status === 'OPEN' ? 'Participate (0.01 USDT)' : `Round is ${lotteryStatus?.status || 'Loading...'}`}\n                </button>\n                <h2 className=\"text-xl font-bold mt-6 mb-2\">Participants ({lotteryStatus?.players?.length || 0})</h2>\n                <div className=\"bg-gray-800 rounded p-2 flex-grow overflow-y-auto\">\n                    {lotteryStatus?.players?.map((player, index) => <div key={index} className=\"text-sm truncate font-mono\">{player}</div>)}\n                </div>\n            </div>\n\n            {/* Right Panel */}\n            <div className=\"w-2/3 flex flex-col h-full\">\n                <div ref={logContainerRef} className=\"flex-grow p-4 bg-black font-mono text-sm h-full overflow-y-auto\">\n                    {displayedLogs.map((log, i) => (\n                        <div key={log.id || i} className={`${\n                            log.type === 'WINNER' ? 'text-yellow-400 font-bold text-lg' \n                            : log.type === 'ERROR' ? 'text-red-500' \n                            : log.type === 'JOIN' ? 'text-blue-400'\n                            : log.type === 'PROCESS' ? 'text-green-400'\n                            : 'text-gray-400'\n                        }`}>\n                            <span className=\"text-gray-600 mr-2\">{new Date(log.timestamp).toLocaleTimeString()}</span>\n                            <span>{log.message}</span>\n                        </div>\n                    ))}\n                </div>\n            </div>\n        </div>\n    );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}