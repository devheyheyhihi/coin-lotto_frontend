{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 128, "column": 0}, "map": {"version":3,"sources":["file:///Users/sinseonghyeon/Documents/GitHub/01-blockchain-projects/maxpia-project/coin_lotto/frontend/src/app/room/%5BroomId%5D/page.tsx"],"sourcesContent":["'use client';\n\nimport { useState, useEffect, useCallback, useRef } from 'react';\nimport { ethers } from 'ethers';\nimport Link from 'next/link';\nimport { useParams, useRouter } from 'next/navigation';\nimport lotteryABIFile from '../../../abis/Lottery.json';\n\n// --- Constants ---\nconst BNB_CHAIN_ID = '0x61';\nconst USDT_CONTRACT_ADDRESS = '0x337610d27c682E347C9cD60BD4b3b107C9d34dDd';\nconst API_BASE_URL = 'http://localhost:3001';\nconst usdtABI = [\n    \"function approve(address spender, uint256 amount) public returns (bool)\",\n    \"function allowance(address owner, address spender) public view returns (uint256)\",\n    \"function balanceOf(address account) public view returns (uint256)\",\n    \"function transfer(address to, uint256 amount) public returns (bool)\",\n    \"function transferFrom(address from, address to, uint256 amount) public returns (bool)\",\n    \"function name() public view returns (string)\",\n    \"function symbol() public view returns (string)\",\n    \"function decimals() public view returns (uint8)\"\n];\nconst lotteryABI = lotteryABIFile.abi;\n\n// --- Type Definitions ---\ndeclare global { interface Window { ethereum?: any; }}\n\ninterface LogEntry {\n    id: number;\n    type: 'JOIN' | 'SYSTEM' | 'WINNER' | 'ERROR' | 'INFO' | 'PROCESS';\n    message: string;\n    timestamp: string;\n}\n\ninterface LotteryRound {\n    id: number; // This is now the room_round_id\n    globalRoundId: number;\n    status: 'OPEN' | 'DRAWING' | 'CLOSED';\n    players: string[];\n    players_snapshot: string | null;\n    winner: string | null;\n    prizePool: string | null;\n    logs: LogEntry[];\n    // These are added from the backend's room config\n    name: string;\n    ticketPrice: string;\n    contractAddress: string;\n}\n\ninterface RoomConfig {\n    name: string;\n    ticketPrice: string;\n    contractAddress: string;\n}\n\n// --- Main Component ---\nexport default function RoomPage() {\n    const params = useParams();\n    const router = useRouter();\n    const roomId = params.roomId as string;\n\n    const [account, setAccount] = useState<string | null>(null);\n    const [isCorrectNetwork, setIsCorrectNetwork] = useState(false);\n    const [isOwner, setIsOwner] = useState(false);\n    const [isProcessing, setIsProcessing] = useState(false);\n    const [lotteryStatus, setLotteryStatus] = useState<LotteryRound | null>(null);\n    const [roomConfig, setRoomConfig] = useState<RoomConfig | null>(null);\n    const [displayedLogs, setDisplayedLogs] = useState<LogEntry[]>([]);\n    const [error, setError] = useState<string | null>(null);\n    const [isAnimationRunning, setIsAnimationRunning] = useState(false);\n    const [hasAnimationRun, setHasAnimationRun] = useState(false);\n\n    const prevRoundIdRef = useRef<number | null>(null);\n    const logContainerRef = useRef<HTMLDivElement>(null);\n\n    useEffect(() => {\n        if (lotteryStatus && lotteryStatus.globalRoundId !== prevRoundIdRef.current) {\n            setHasAnimationRun(false);\n            prevRoundIdRef.current = lotteryStatus.globalRoundId;\n        }\n    }, [lotteryStatus]);\n\n    useEffect(() => {\n        if (logContainerRef.current) {\n            logContainerRef.current.scrollTop = logContainerRef.current.scrollHeight;\n        }\n    }, [displayedLogs]);\n\n    const addFrontendLog = useCallback((type: LogEntry['type'], message: string) => {\n        const newLog: LogEntry = { id: Math.random() * -100000, type, message, timestamp: new Date().toISOString() };\n        setDisplayedLogs(prev => [...prev, newLog]);\n    }, []);\n\n    const fetchStatus = useCallback(async () => {\n        if (isAnimationRunning || !roomId) return;\n        try {\n            const response = await fetch(`${API_BASE_URL}/lottery-status/${roomId}`);\n            if (!response.ok) {\n                const errorData = await response.json();\n                throw new Error(errorData.message || 'Failed to fetch lottery status.');\n            }\n            const data: LotteryRound = await response.json();\n            setLotteryStatus(data);\n\n            if (!roomConfig) {\n                setRoomConfig({\n                    name: data.name,\n                    ticketPrice: data.ticketPrice,\n                    contractAddress: data.contractAddress,\n                });\n            }\n\n            setDisplayedLogs(prevLogs => {\n                const existingIds = new Set(prevLogs.map(l => l.id));\n                let newLogs = data.logs.filter(log => !existingIds.has(log.id));\n                if (data.status === 'DRAWING' || isAnimationRunning) {\n                   newLogs = newLogs.filter(log => log.type !== 'WINNER');\n                }\n                return [...prevLogs, ...newLogs].sort((a,b) => new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime());\n            });\n        } catch (error: any) {\n            setError(error.message);\n        }\n    }, [isAnimationRunning, roomId, roomConfig]);\n\n    const checkNetwork = useCallback(async () => {\n        if (window.ethereum) {\n            const chainId = await window.ethereum.request({ method: 'eth_chainId' });\n            setIsCorrectNetwork(chainId === BNB_CHAIN_ID);\n        }\n    }, []);\n\n    const checkOwner = useCallback(async (currentAccount: string) => {\n        if (window.ethereum && currentAccount && isCorrectNetwork && roomConfig?.contractAddress) {\n            const provider = new ethers.BrowserProvider(window.ethereum);\n            const contract = new ethers.Contract(roomConfig.contractAddress, lotteryABI, provider);\n            try {\n                const ownerAddress = await contract.owner();\n                setIsOwner(ownerAddress.toLowerCase() === currentAccount.toLowerCase());\n            } catch (e) {\n                console.error(\"Couldn't check owner status: \", e);\n                setIsOwner(false);\n            }\n        } else {\n            setIsOwner(false);\n        }\n    }, [isCorrectNetwork, roomConfig]);\n\n    useEffect(() => {\n        const handleAccountsChanged = (accounts: string[]) => {\n            const newAccount = accounts.length > 0 ? accounts[0] : null;\n            setAccount(newAccount);\n        };\n        if (window.ethereum) {\n            window.ethereum.on('accountsChanged', handleAccountsChanged);\n            window.ethereum.on('chainChanged', checkNetwork);\n            (async () => {\n                const accounts = await window.ethereum.request({ method: 'eth_accounts' });\n                handleAccountsChanged(accounts);\n                await checkNetwork();\n            })();\n            return () => {\n                window.ethereum.removeListener('accountsChanged', handleAccountsChanged);\n                window.ethereum.removeListener('chainChanged', checkNetwork);\n            };\n        }\n    }, [checkNetwork]);\n\n    useEffect(() => {\n        if (account && isCorrectNetwork && roomConfig) {\n            checkOwner(account);\n        } else {\n            setIsOwner(false);\n        }\n    }, [account, isCorrectNetwork, roomConfig, checkOwner]);\n    \n    useEffect(() => {\n        if (lotteryStatus?.status === 'DRAWING' && !isAnimationRunning && !hasAnimationRun) {\n            setIsAnimationRunning(true);\n            setHasAnimationRun(true);\n            const runDrawingSequence = async () => {\n                addFrontendLog('SYSTEM', 'Draw starting in 3...');\n                await new Promise(res => setTimeout(res, 1000));\n                addFrontendLog('SYSTEM', 'Draw starting in 2...');\n                await new Promise(res => setTimeout(res, 1000));\n                addFrontendLog('SYSTEM', 'Draw starting in 1...');\n                await new Promise(res => setTimeout(res, 1000));\n                \n                const players = lotteryStatus.players_snapshot ? JSON.parse(lotteryStatus.players_snapshot) : [];\n                if (players.length > 0) {\n                    const animationDuration = 5000;\n                    const startTime = Date.now();\n                    const animationInterval = setInterval(() => {\n                         if (Date.now() - startTime > animationDuration) {\n                            clearInterval(animationInterval);\n                            const closeRound = async () => {\n                                addFrontendLog('SYSTEM', 'Verification complete. Announcing winner...');\n                                const winnerLog = lotteryStatus.logs.find(l => l.type === 'WINNER');\n                                if (winnerLog) setDisplayedLogs(prev => [...prev, winnerLog]);\n                                else if (lotteryStatus.winner) addFrontendLog('WINNER', `🎉 Congratulations to the winner: ${lotteryStatus.winner}`);\n                                await new Promise(res => setTimeout(res, 3000));\n                                addFrontendLog('SYSTEM', 'This round is now closed. A new round will begin shortly.');\n                                for (let i = 5; i > 0; i--) {\n                                    addFrontendLog('SYSTEM', `Clearing board in ${i}...`);\n                                    await new Promise(res => setTimeout(res, 1000));\n                                }\n                                setDisplayedLogs([]);\n                                setIsAnimationRunning(false);\n                            };\n                            closeRound();\n                        } else {\n                            const randomIndex = Math.floor(Math.random() * players.length);\n                            addFrontendLog('PROCESS', `Verifying: ${players[randomIndex]}`);\n                        }\n                    }, 10);\n                } else {\n                     addFrontendLog('ERROR', 'No participants in the draw.');\n                     setIsAnimationRunning(false);\n                }\n            };\n            runDrawingSequence();\n        }\n    }, [lotteryStatus, isAnimationRunning, hasAnimationRun, addFrontendLog]);\n\n    useEffect(() => {\n        fetchStatus();\n        const interval = setInterval(() => {\n            if (!isAnimationRunning) fetchStatus();\n        }, 3000);\n        return () => clearInterval(interval);\n    }, [fetchStatus, isAnimationRunning]);\n\n    const connectWallet = async () => {\n        if (!window.ethereum) return setError('Please install MetaMask.');\n        try {\n            const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n            setAccount(accounts[0]);\n        } catch (error) { setError('Failed to connect wallet.'); }\n    };\n\n    const handleParticipate = async () => {\n        if (!account || !isCorrectNetwork || !roomConfig) return;\n        setIsProcessing(true);\n        setError(null);\n        try {\n            const provider = new ethers.BrowserProvider(window.ethereum);\n            const signer = await provider.getSigner();\n            const usdtContract = new ethers.Contract(USDT_CONTRACT_ADDRESS, usdtABI, signer);\n            const lotteryContract = new ethers.Contract(roomConfig.contractAddress, lotteryABI, signer);\n            const participationFee = ethers.parseUnits(roomConfig.ticketPrice, 18);\n            \n            const balance = await usdtContract.balanceOf(account);\n            if (balance < participationFee) throw new Error(`Insufficient USDT balance.`);\n            \n            const allowance = await usdtContract.allowance(account, roomConfig.contractAddress);\n            if (allowance < participationFee) {\n                const approveTx = await usdtContract.approve(roomConfig.contractAddress, ethers.MaxUint256);\n                await approveTx.wait();\n            }\n            \n            const participateTx = await lotteryContract.participate();\n            await participateTx.wait();\n            \n            await fetch(`${API_BASE_URL}/participate/${roomId}`, {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({ userAddress: account })\n            });\n            await fetchStatus();\n        } catch (error: any) {\n            setError(`Participation failed: ${error.reason || error.message}`);\n        } finally {\n            setIsProcessing(false);\n        }\n    };\n    \n    return (\n        <div className=\"flex h-screen bg-gray-900 text-white font-sans\">\n            {isProcessing && (\n                <div className=\"absolute inset-0 bg-black bg-opacity-70 flex flex-col justify-center items-center z-50\">\n                    <div className=\"w-16 h-16 border-4 border-yellow-400 border-t-transparent rounded-full animate-spin\"></div>\n                    <p className=\"mt-4 text-white text-xl font-semibold\">Processing Transaction...</p>\n                </div>\n            )}\n            <div className=\"w-1/3 border-r border-gray-700 flex flex-col p-4\">\n                 <div className=\"mb-4\">\n                    <Link href=\"/\" className=\"text-blue-400 hover:underline\">← Back to Lobby</Link>\n                </div>\n                <h1 className=\"text-3xl font-bold mb-4\">{roomConfig?.name || 'Loading Room...'}</h1>\n                <h2 className=\"text-xl font-semibold mb-2 text-gray-400\">Global Round #{lotteryStatus?.globalRoundId || '...'}</h2>\n                <div className=\"text-lg text-yellow-400 mb-4\">\n                    Prize Pool: <span className=\"font-bold\">{parseFloat(lotteryStatus?.prizePool || '0').toFixed(4)}</span> USDT\n                </div>\n                <div className=\"mb-4\">\n                    {account ? (\n                        <div className=\"flex items-center justify-between\">\n                            <span className=\"text-sm bg-green-500 rounded px-2 py-1\">{`${account.substring(0, 6)}...${account.substring(account.length - 4)}`}</span>\n                            {isOwner && <Link href={`/admin?roomId=${roomId}`} className=\"text-sm bg-red-600 rounded px-2 py-1\">Admin</Link>}\n                        </div>\n                    ) : (\n                        <button onClick={connectWallet} className=\"w-full bg-blue-600 p-2 rounded\">Connect Wallet</button>\n                    )}\n                </div>\n                {error && <p className=\"text-red-500 text-xs my-2\">{error}</p>}\n                <button\n                    onClick={handleParticipate}\n                    disabled={isProcessing || lotteryStatus?.status !== 'OPEN' || !account || !isCorrectNetwork}\n                    className=\"w-full bg-yellow-500 text-black font-bold p-3 rounded disabled:bg-gray-600\"\n                >\n                    {lotteryStatus?.status === 'OPEN' && roomConfig ? `Participate (${roomConfig.ticketPrice} USDT)` : `Round is ${lotteryStatus?.status || 'Loading...'}`}\n                </button>\n                <h2 className=\"text-xl font-bold mt-6 mb-2\">Participants ({lotteryStatus?.players?.length || 0})</h2>\n                <div className=\"bg-gray-800 rounded p-2 flex-grow overflow-y-auto\">\n                    {lotteryStatus?.players?.map((player, index) => <div key={index} className=\"text-sm truncate font-mono\">{player}</div>)}\n                </div>\n            </div>\n            <div className=\"w-2/3 flex flex-col h-full\">\n                <div ref={logContainerRef} className=\"flex-grow p-4 bg-black font-mono text-sm h-full overflow-y-auto\">\n                    {displayedLogs.map((log, i) => (\n                        <div key={log.id || i} className={`${\n                            log.type === 'WINNER' ? 'text-yellow-400 font-bold text-lg' \n                            : log.type === 'ERROR' ? 'text-red-500' \n                            : log.type === 'JOIN' ? 'text-blue-400'\n                            : log.type === 'PROCESS' ? 'text-green-400'\n                            : 'text-gray-400'\n                        }`}>\n                            <span className=\"text-gray-600 mr-2\">{new Date(log.timestamp).toLocaleTimeString()}</span>\n                            <span>{log.message}</span>\n                        </div>\n                    ))}\n                </div>\n            </div>\n        </div>\n    );\n} "],"names":[],"mappings":"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","debugId":null}}]
}