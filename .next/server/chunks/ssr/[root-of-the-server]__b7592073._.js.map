{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 128, "column": 0}, "map": {"version":3,"sources":["file:///Users/sinseonghyeon/Documents/GitHub/01-blockchain-projects/maxpia-project/coin_lotto/frontend/src/app/page.tsx"],"sourcesContent":["'use client';\n\nimport { useState, useEffect, useCallback, useRef } from 'react';\nimport { ethers } from 'ethers';\nimport lotteryABI from '../abis/Lottery.json';\nimport Link from 'next/link';\n\n// --- Constants ---\nconst BNB_CHAIN_ID = '0x61';\nconst LOTTERY_CONTRACT_ADDRESS = '0x08A2BD2c14d27baA653B0f0F2870C6bf23fe1FdD';\nconst USDT_CONTRACT_ADDRESS = '0x337610d27c682E347C9cD60BD4b3b107C9d34dDd';\nconst API_BASE_URL = 'http://localhost:3001';\nconst usdtABI = [\"function approve(address spender, uint256 amount) public returns (bool)\", \"function allowance(address owner, address spender) public view returns (uint256)\"];\n\n// --- Type Definitions ---\ndeclare global { interface Window { ethereum?: any; }}\n\ninterface LogEntry {\n    type: 'JOIN' | 'SYSTEM' | 'WINNER' | 'ERROR' | 'INFO' | 'PROCESS';\n    message: string;\n    timestamp: string;\n}\n\ninterface LotteryRound {\n    id: number;\n    roundId: string;\n    status: 'OPEN' | 'DRAWING' | 'CLOSED';\n    players: string[];\n    players_snapshot: string | null;\n    winner: string | null;\n    prizePool: string | null;\n    logs: LogEntry[];\n}\n\n// --- Animation Component ---\nconst HackingAnimation = ({ players, onAnimationEnd }: { players: string[], onAnimationEnd: (animationLogs: LogEntry[]) => void }) => {\n    const logsContainerRef = useRef<HTMLDivElement>(null);\n    const [animationLogs, setAnimationLogs] = useState<LogEntry[]>([]);\n    const animationFrameId = useRef<number | null>(null);\n\n    useEffect(() => {\n        let playerIndex = 0;\n        const generatePlayerLine = () => {\n            const player = players[playerIndex % players.length];\n            playerIndex++;\n            return `[PROCESS] Verifying participant: ${player}`;\n        };\n        \n        const addLog = () => {\n            const newLog: LogEntry = {\n                type: 'PROCESS',\n                message: generatePlayerLine(),\n                timestamp: new Date().toISOString()\n            };\n            setAnimationLogs(prev => [...prev.slice(-50), newLog]);\n            if (logsContainerRef.current) {\n                logsContainerRef.current.scrollTop = logsContainerRef.current.scrollHeight;\n            }\n            animationFrameId.current = requestAnimationFrame(addLog);\n        };\n        \n        if (players.length > 0) {\n            animationFrameId.current = requestAnimationFrame(addLog);\n        }\n\n        const timer = setTimeout(() => {\n            if(animationFrameId.current) cancelAnimationFrame(animationFrameId.current);\n            onAnimationEnd(animationLogs);\n        }, 3000);\n\n        return () => {\n            if(animationFrameId.current) cancelAnimationFrame(animationFrameId.current);\n            clearTimeout(timer);\n        };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [players, onAnimationEnd]);\n\n    return (\n        <div ref={logsContainerRef} className=\"font-mono text-sm text-green-400 bg-black h-full p-2 overflow-y-hidden\">\n            {animationLogs.map((log, i) => (\n                <div key={i}>\n                    <span className=\"text-gray-600 mr-2\">{new Date(log.timestamp).toLocaleTimeString()}</span>\n                    <span>{log.message}</span>\n                </div>\n            ))}\n        </div>\n    );\n};\n\n// --- Main Component ---\nexport default function Home() {\n    const [account, setAccount] = useState<string | null>(null);\n    const [isCorrectNetwork, setIsCorrectNetwork] = useState(false);\n    const [isOwner, setIsOwner] = useState(false);\n    const [isProcessing, setIsProcessing] = useState(false);\n    const [lotteryStatus, setLotteryStatus] = useState<LotteryRound | null>(null);\n    const [allLogs, setAllLogs] = useState<LogEntry[]>([]);\n    const [error, setError] = useState<string | null>(null);\n    const logContainerRef = useRef<HTMLDivElement>(null);\n    \n    useEffect(() => {\n        if (logContainerRef.current) {\n            logContainerRef.current.scrollTop = logContainerRef.current.scrollHeight;\n        }\n    }, [allLogs]);\n    \n    const fetchStatus = useCallback(async () => {\n        try {\n            const response = await fetch(`${API_BASE_URL}/lottery-status`);\n            if (!response.ok) throw new Error('Network response was not ok');\n            const data: LotteryRound = await response.json();\n            \n            setLotteryStatus(data);\n\n            setAllLogs(prevLogs => {\n                const existingTimestamps = new Set(prevLogs.map(l => l.timestamp));\n                const newLogs = data.logs.filter(log => !existingTimestamps.has(log.timestamp));\n                return [...prevLogs, ...newLogs];\n            });\n\n        } catch (error) {\n            console.error(\"Failed to fetch lottery status:\", error);\n            setError('Failed to connect to server.');\n        }\n    }, []);\n    \n    const checkNetwork = useCallback(async () => {\n        if (window.ethereum) {\n            const chainId = await window.ethereum.request({ method: 'eth_chainId' });\n            setIsCorrectNetwork(chainId === BNB_CHAIN_ID);\n        }\n    }, []);\n\n    const checkOwner = useCallback(async (currentAccount: string) => {\n        if (window.ethereum && currentAccount && isCorrectNetwork) {\n            const provider = new ethers.BrowserProvider(window.ethereum);\n            const contract = new ethers.Contract(LOTTERY_CONTRACT_ADDRESS, lotteryABI, provider);\n            const ownerAddress = await contract.owner();\n            setIsOwner(ownerAddress.toLowerCase() === currentAccount.toLowerCase());\n        } else {\n            setIsOwner(false);\n        }\n    }, [isCorrectNetwork]);\n\n    useEffect(() => {\n        const handleAccountsChanged = (accounts: string[]) => {\n            const newAccount = accounts.length > 0 ? accounts[0] : null;\n            setAccount(newAccount);\n            if (newAccount) checkOwner(newAccount); else setIsOwner(false);\n        };\n        if (window.ethereum) {\n            window.ethereum.on('accountsChanged', handleAccountsChanged);\n            window.ethereum.on('chainChanged', checkNetwork);\n            (async () => {\n                const accounts = await window.ethereum.request({ method: 'eth_accounts' });\n                handleAccountsChanged(accounts);\n                await checkNetwork();\n            })();\n            return () => {\n                window.ethereum.removeListener('accountsChanged', handleAccountsChanged);\n                window.ethereum.removeListener('chainChanged', checkNetwork);\n            };\n        }\n    }, [checkNetwork, checkOwner]);\n\n    useEffect(() => {\n        if (lotteryStatus?.status === 'DRAWING') {\n            return;\n        }\n        const interval = setInterval(() => {\n            fetchStatus();\n        }, 5000);\n        return () => clearInterval(interval);\n    }, [fetchStatus, lotteryStatus?.status]);\n\n    const handleAnimationFinish = async (animationLogs: LogEntry[]) => {\n        setAllLogs(prev => [...prev, ...animationLogs]);\n        try {\n            await fetch(`${API_BASE_URL}/pick-winner`, { method: 'POST' });\n            setTimeout(fetchStatus, 2000);\n        } catch (error: any) {\n            setError(`Failed to pick winner: ${error.message}`);\n        }\n    }\n\n    const connectWallet = async () => {\n        if (!window.ethereum) return setError('Please install MetaMask.');\n        try {\n            const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n            setAccount(accounts[0]);\n        } catch (error) {\n            setError('Failed to connect wallet.');\n        }\n    };\n\n    const handleParticipate = async () => {\n        if (!account || !isCorrectNetwork) return;\n        setIsProcessing(true);\n        setError(null);\n        try {\n            const provider = new ethers.BrowserProvider(window.ethereum);\n            const signer = await provider.getSigner();\n            const usdtContract = new ethers.Contract(USDT_CONTRACT_ADDRESS, usdtABI, signer);\n            const lotteryContract = new ethers.Contract(LOTTERY_CONTRACT_ADDRESS, lotteryABI, signer);\n            const participationFee = ethers.parseUnits(\"0.01\", 18);\n            const allowance = await usdtContract.allowance(account, LOTTERY_CONTRACT_ADDRESS);\n\n            if (allowance < participationFee) {\n                const approveTx = await usdtContract.approve(LOTTERY_CONTRACT_ADDRESS, ethers.MaxUint256);\n                await approveTx.wait();\n            }\n            const participateTx = await lotteryContract.participate();\n            await participateTx.wait();\n            \n            await fetch(`${API_BASE_URL}/participate`, {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({ userAddress: account })\n            });\n            await fetchStatus();\n        } catch (error: any) {\n            setError(`Participation failed: ${error.reason || error.message}`);\n        } finally {\n            setIsProcessing(false);\n        }\n    };\n    \n    return (\n        <div className=\"flex h-screen bg-gray-900 text-white font-sans\">\n            {isProcessing && (\n                <div className=\"absolute inset-0 bg-black bg-opacity-70 flex flex-col justify-center items-center z-50\">\n                    <div className=\"w-16 h-16 border-4 border-yellow-400 border-t-transparent rounded-full animate-spin\"></div>\n                    <p className=\"mt-4 text-white text-xl font-semibold\">Processing Transaction...</p>\n                </div>\n            )}\n            {/* Left Panel */}\n            <div className=\"w-1/3 border-r border-gray-700 flex flex-col p-4\">\n                <h1 className=\"text-3xl font-bold mb-4\">Lotto Game</h1>\n                <div className=\"text-lg text-yellow-400 mb-4\">\n                    Prize Pool: <span className=\"font-bold\">{parseFloat(lotteryStatus?.prizePool || '0').toFixed(4)}</span> USDT\n                </div>\n                <div className=\"mb-4\">\n                    {account ? (\n                        <div className=\"flex items-center justify-between\">\n                            <span className=\"text-sm bg-green-500 rounded px-2 py-1\">{`${account.substring(0, 6)}...${account.substring(account.length - 4)}`}</span>\n                            {isOwner && <Link href=\"/admin\" className=\"text-sm bg-red-600 rounded px-2 py-1\">Admin</Link>}\n                             <Link href=\"/history\" className=\"text-sm bg-blue-600 rounded px-2 py-1\">History</Link>\n                        </div>\n                    ) : (\n                        <button onClick={connectWallet} className=\"w-full bg-blue-600 p-2 rounded\">Connect Wallet</button>\n                    )}\n                </div>\n                 {error && <p className=\"text-red-500 text-xs my-2\">{error}</p>}\n                <button\n                    onClick={handleParticipate}\n                    disabled={isProcessing || lotteryStatus?.status !== 'OPEN' || !account || !isCorrectNetwork}\n                    className=\"w-full bg-yellow-500 text-black font-bold p-3 rounded disabled:bg-gray-600\"\n                >\n                    {lotteryStatus?.status === 'OPEN' ? 'Participate (0.01 USDT)' : `Round is ${lotteryStatus?.status || 'Loading...'}`}\n                </button>\n                <h2 className=\"text-xl font-bold mt-6 mb-2\">Participants ({lotteryStatus?.players?.length || 0})</h2>\n                <div className=\"bg-gray-800 rounded p-2 flex-grow overflow-y-auto\">\n                    {lotteryStatus?.players?.map((player, index) => <div key={index} className=\"text-sm truncate font-mono\">{player}</div>)}\n                </div>\n            </div>\n\n            {/* Right Panel */}\n            <div className=\"w-2/3 flex flex-col h-full\">\n                <div className=\"flex-grow p-4 bg-black relative h-full\">\n                    {lotteryStatus?.status === 'DRAWING' ? (\n                        <HackingAnimation \n                            players={lotteryStatus.players_snapshot ? JSON.parse(lotteryStatus.players_snapshot) : []}\n                            onAnimationEnd={handleAnimationFinish} \n                        />\n                    ) : (\n                        <div ref={logContainerRef} className=\"font-mono text-sm h-full overflow-y-auto\">\n                            {allLogs.map((log, i) => (\n                                <div key={i} className={`${\n                                    log.type === 'WINNER' ? 'text-yellow-400 font-bold' \n                                    : log.type === 'ERROR' ? 'text-red-500' \n                                    : log.type === 'JOIN' ? 'text-blue-400'\n                                    : log.type === 'PROCESS' ? 'text-green-400'\n                                    : 'text-gray-400'\n                                }`}>\n                                    <span className=\"text-gray-600 mr-2\">{new Date(log.timestamp).toLocaleTimeString()}</span>\n                                    <span>{log.message}</span>\n                                </div>\n                            ))}\n                        </div>\n                    )}\n                </div>\n            </div>\n        </div>\n    );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}