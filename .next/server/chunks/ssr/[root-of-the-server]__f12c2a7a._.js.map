{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 128, "column": 0}, "map": {"version":3,"sources":["file:///Users/sinseonghyeon/Documents/GitHub/01-blockchain-projects/maxpia-project/coin_lotto/frontend/src/components/Header.tsx"],"sourcesContent":["'use client';\n\nimport Link from 'next/link';\nimport Image from 'next/image';\nimport { usePathname } from 'next/navigation';\n\ninterface HeaderProps {\n  account: string | null;\n  connectWallet: () => void;\n}\n\nconst Header = ({ account, connectWallet }: HeaderProps) => {\n  const pathname = usePathname();\n  const baseButtonStyle = \"rounded-[21px] flex-shrink-0 font-bold flex items-center justify-center text-sm w-[110px] h-[32px] md:text-base md:w-[139px] md:h-[34px]\";\n  \n  const buttonStyle = account\n    ? `${baseButtonStyle} border border-white bg-gradient-to-r from-[#1AEBA9] to-[#384FC0] shadow-[0_4px_4px_0_rgba(0,0,0,0.25)]`\n    : `${baseButtonStyle} bg-black`;\n\n  const getButtonText = () => {\n    if (!account) {\n      return '지갑 연결';\n    }\n    if (pathname.startsWith('/room/')) {\n      return `${account.substring(0, 6)}...${account.slice(-4)}`;\n    }\n    return '게임 시작';\n  };\n\n  return (\n    <header className=\"flex items-center justify-between px-4 py-6 md:px-[8.33vw] md:py-[5.5vh]\">\n      <Link href=\"/\" className=\"cursor-pointer\">\n        <Image\n          src=\"/header_logo.svg\"\n          alt=\"TetherLuck Logo\"\n          width={135}\n          height={40}\n          className=\"h-auto w-[120px] md:w-[10vw]\"\n        />\n      </Link>\n      <nav className=\"flex items-center space-x-4 md:space-x-10\">\n        <Link href=\"/how-to-play\" className=\"text-sm text-white hover:text-gray-300 md:text-base md:hover:text-white\">\n          참여 방법\n        </Link>\n        <button\n          onClick={connectWallet}\n          className={buttonStyle}\n        >\n          {getButtonText()}\n        </button>\n      </nav>\n    </header>\n  );\n};\n\nexport default Header; "],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAJA;;;;;AAWA,MAAM,SAAS,CAAC,EAAE,OAAO,EAAE,aAAa,EAAe;IACrD,MAAM,WAAW,CAAA,GAAA,kIAAA,CAAA,cAAW,AAAD;IAC3B,MAAM,kBAAkB;IAExB,MAAM,cAAc,UAChB,GAAG,gBAAgB,uGAAuG,CAAC,GAC3H,GAAG,gBAAgB,SAAS,CAAC;IAEjC,MAAM,gBAAgB;QACpB,IAAI,CAAC,SAAS;YACZ,OAAO;QACT;QACA,IAAI,SAAS,UAAU,CAAC,WAAW;YACjC,OAAO,GAAG,QAAQ,SAAS,CAAC,GAAG,GAAG,GAAG,EAAE,QAAQ,KAAK,CAAC,CAAC,IAAI;QAC5D;QACA,OAAO;IACT;IAEA,qBACE,8OAAC;QAAO,WAAU;;0BAChB,8OAAC,4JAAA,CAAA,UAAI;gBAAC,MAAK;gBAAI,WAAU;0BACvB,cAAA,8OAAC,6HAAA,CAAA,UAAK;oBACJ,KAAI;oBACJ,KAAI;oBACJ,OAAO;oBACP,QAAQ;oBACR,WAAU;;;;;;;;;;;0BAGd,8OAAC;gBAAI,WAAU;;kCACb,8OAAC,4JAAA,CAAA,UAAI;wBAAC,MAAK;wBAAe,WAAU;kCAA0E;;;;;;kCAG9G,8OAAC;wBACC,SAAS;wBACT,WAAW;kCAEV;;;;;;;;;;;;;;;;;;AAKX;uCAEe","debugId":null}},
    {"offset": {"line": 214, "column": 0}, "map": {"version":3,"sources":["file:///Users/sinseonghyeon/Documents/GitHub/01-blockchain-projects/maxpia-project/coin_lotto/frontend/src/components/SideMenu.tsx"],"sourcesContent":["'use client';\n\nimport Image from 'next/image';\n\ninterface SideMenuProps {\n  onOpenMyPage: () => void;\n}\n\nconst SideMenu = ({ onOpenMyPage }: SideMenuProps) => (\n  <div className=\"fixed right-4 top-1/2 -translate-y-1/2 w-[80px] h-[200px] flex-shrink-0 rounded-[20px] bg-gradient-to-b from-[#FFF17E] to-[#1BE6FD] p-[1px] shadow-[0_4px_4px_0_rgba(0,0,0,0.25)] md:right-[1.67vw] md:w-[6vw] md:h-[28vh]\">\n    <aside className=\"w-full h-full rounded-[19px] bg-gradient-to-b from-[#311A1A] to-[#13399A] flex flex-col items-center justify-center space-y-4 md:space-y-[4vh]\">\n      <button className=\"flex flex-col items-center\">\n        <Image src=\"/icon_explain.svg\" alt=\"Game Explain\" width={48} height={48} className=\"w-8 h-8 md:w-10 md:h-10\" />\n        <span className=\"text-xs mt-1\">게임설명</span>\n      </button>\n      <button\n        onClick={onOpenMyPage}\n        className=\"flex flex-col items-center\"\n      >\n        <Image src=\"/icon_mypage.svg\" alt=\"My Page\" width={48} height={48} className=\"w-8 h-8 md:w-10 md:h-10\" />\n        <span className=\"text-xs mt-1\">마이페이지</span>\n      </button>\n    </aside>\n  </div>\n);\n\nexport default SideMenu; "],"names":[],"mappings":";;;;AAEA;AAFA;;;AAQA,MAAM,WAAW,CAAC,EAAE,YAAY,EAAiB,iBAC/C,8OAAC;QAAI,WAAU;kBACb,cAAA,8OAAC;YAAM,WAAU;;8BACf,8OAAC;oBAAO,WAAU;;sCAChB,8OAAC,6HAAA,CAAA,UAAK;4BAAC,KAAI;4BAAoB,KAAI;4BAAe,OAAO;4BAAI,QAAQ;4BAAI,WAAU;;;;;;sCACnF,8OAAC;4BAAK,WAAU;sCAAe;;;;;;;;;;;;8BAEjC,8OAAC;oBACC,SAAS;oBACT,WAAU;;sCAEV,8OAAC,6HAAA,CAAA,UAAK;4BAAC,KAAI;4BAAmB,KAAI;4BAAU,OAAO;4BAAI,QAAQ;4BAAI,WAAU;;;;;;sCAC7E,8OAAC;4BAAK,WAAU;sCAAe;;;;;;;;;;;;;;;;;;;;;;;uCAMxB","debugId":null}},
    {"offset": {"line": 300, "column": 0}, "map": {"version":3,"sources":["file:///Users/sinseonghyeon/Documents/GitHub/01-blockchain-projects/maxpia-project/coin_lotto/frontend/src/components/MyPageModal.tsx"],"sourcesContent":["'use client';\n\nimport { useState, useEffect } from 'react';\n\nconst API_BASE_URL = 'http://localhost:3001'; // This might need configuration\n\n// --- Type Definitions ---\ninterface Room {\n  id: string;\n  name: string;\n  ticketPrice: string;\n}\n\ninterface HistoryItem {\n    roundNumber: number;\n    roomName: string;\n    ticketPrice: string;\n    wasWinner: boolean;\n}\n\ninterface MyPageModalProps {\n    account: string;\n    onClose: () => void;\n}\n\n// --- MyPage Modal Component ---\nconst MyPageModal = ({ account, onClose }: MyPageModalProps) => {\n    const [activeMainTab, setActiveMainTab] = useState('history'); // 'history' or 'wallet'\n    const [allHistory, setAllHistory] = useState<HistoryItem[]>([]);\n    const [rooms, setRooms] = useState<Room[]>([]);\n    const [activeRoomId, setActiveRoomId] = useState<string>('');\n    const [isLoading, setIsLoading] = useState(true);\n    const [error, setError] = useState<string | null>(null);\n\n    useEffect(() => {\n        if (!account) return;\n        \n        const fetchHistoryAndRooms = async () => {\n            setIsLoading(true);\n            setError(null);\n            try {\n                const [historyRes, roomsRes] = await Promise.all([\n                    fetch(`${API_BASE_URL}/user-history/${account}`),\n                    fetch(`${API_BASE_URL}/rooms`)\n                ]);\n\n                if (!historyRes.ok) throw new Error('Failed to fetch history.');\n                if (!roomsRes.ok) throw new Error('Failed to fetch rooms.');\n\n                const historyData = await historyRes.json();\n                const roomsData = await roomsRes.json();\n                \n                setAllHistory(historyData.history || []);\n                setRooms(roomsData || []);\n                if (roomsData.length > 0 && !activeRoomId) {\n                    setActiveRoomId(roomsData[0].id);\n                }\n\n            } catch (err: any) {\n                setError(err.message);\n            } finally {\n                setIsLoading(false);\n            }\n        };\n        fetchHistoryAndRooms();\n    }, [account, activeRoomId]);\n\n    const filteredHistory = allHistory.filter(item => {\n        const activeRoom = rooms.find(r => r.id === activeRoomId);\n        return activeRoom ? item.roomName.includes(activeRoom.name) : false;\n    });\n\n    return (\n        <div className=\"fixed inset-0 bg-[#FFFFFF80] flex justify-center items-center z-50\" onClick={onClose}>\n            <div className=\"bg-[linear-gradient(#000000,#1A255D)] rounded-3xl w-full max-w-2xl text-left shadow-xl flex flex-col\" onClick={(e) => e.stopPropagation()}>\n                {/* Header and Main Tabs */}\n                <div className='rounded-t-3xl flex justify-center items-center p-4 border-b border-gray-700 bg-gradient-to-r from-[#143892] to-[#0E369D] shadow-[0_4px_4px_0_rgba(0,0,0,0.25)]'>\n                    <span className=\"font-['Pretendard'] text-base font-bold leading-normal text-white\">마이페이지</span>\n                </div>\n                <div className=\"flex justify-between items-center p-4 border-gray-700\">\n                    <div className=\"flex gap-6\">\n                        <button onClick={() => setActiveMainTab('history')} className={`text-xl font-semibold pb-2 ${activeMainTab === 'history' ? 'text-white border-b-2 border-white' : 'text-gray-500 hover:text-white'}`}>\n                            History\n                        </button>\n                        <button onClick={() => setActiveMainTab('wallet')} className={`text-xl font-semibold pb-2 ${activeMainTab === 'wallet' ? 'text-white border-b-2 border-white' : 'text-gray-500 hover:text-white'}`}>\n                            Wallet\n                        </button>\n                    </div>\n                    {/* <button onClick={onClose} className=\"text-gray-400 hover:text-white text-3xl\">&times;</button> */}\n                </div>\n\n                {/* Content Area */}\n                <div className=\"p-6 h-[500px] overflow-y-auto\">\n                    {activeMainTab === 'history' && (\n                        <div>\n                            <div className=\"flex border-b border-gray-600 mb-4\">\n                                {rooms.map(room => (\n                                    <button\n                                        key={room.id}\n                                        onClick={() => setActiveRoomId(room.id)}\n                                        className={`py-2 px-4 font-semibold transition-colors duration-200 ${activeRoomId === room.id ? 'border-b-2 border-yellow-400 text-yellow-400' : 'text-gray-400 hover:text-white'}`}\n                                    >\n                                        {room.name}\n                                    </button>\n                                ))}\n                            </div>\n                            {isLoading ? <div className=\"w-8 h-8 border-4 border-yellow-400 border-t-transparent rounded-full animate-spin mx-auto my-4\"></div>\n                            : error ? <p className=\"text-red-500 text-center\">{error}</p>\n                            : filteredHistory.length > 0 ? (\n                                <ul className=\"space-y-3 pr-2\">\n                                    {filteredHistory.map((item, index) => (\n                                        <li key={index} className={`p-4 rounded-md flex justify-between items-center ${item.wasWinner ? 'bg-yellow-500 text-black' : 'bg-gray-700'}`}>\n                                            <div className=\"flex items-center gap-4\">\n                                                <span className=\"bg-black text-white text-center font-bold rounded-md px-3 py-2\">Round #{item.roundNumber}</span>\n                                                <div>\n                                                    <p className=\"font-semibold\">Winning # <span className=\"text-lg\">{item.roundNumber}</span></p> {/* Placeholder */}\n                                                </div>\n                                                <div>\n                                                    <p className=\"font-semibold\">My # <span className=\"text-lg\">{item.roundNumber}</span></p> {/* Placeholder */}\n                                                </div>\n                                            </div>\n                                            <span className=\"text-2xl font-bold\">{item.wasWinner ? 'WIN' : 'LOSE'}</span>\n                                        </li>\n                                    ))}\n                                </ul>\n                            ) : <p className=\"text-gray-500 text-center py-4\">No participation history for this room.</p>}\n                        </div>\n                    )}\n                    {activeMainTab === 'wallet' && (\n                        <div>\n                            <h3 className=\"text-xl font-bold mb-4\">Connected Wallet</h3>\n                            <div className=\"bg-gray-700 p-4 rounded-lg\">\n                                <p className=\"text-gray-400\">Address:</p>\n                                <p className=\"text-white font-mono break-all\">{account}</p>\n                            </div>\n                        </div>\n                    )}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default MyPageModal; "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 616, "column": 0}, "map": {"version":3,"sources":["file:///Users/sinseonghyeon/Documents/GitHub/01-blockchain-projects/maxpia-project/coin_lotto/frontend/src/app/room/%5BroomId%5D/page.tsx"],"sourcesContent":["'use client';\n\nimport { useState, useEffect, useCallback, useRef } from 'react';\nimport { ethers } from 'ethers';\nimport Link from 'next/link';\nimport { useParams, useRouter } from 'next/navigation';\nimport lotteryABIFile from '../../../abis/Lottery.json';\nimport Header from '@/components/Header';\nimport SideMenu from '@/components/SideMenu';\nimport MyPageModal from '@/components/MyPageModal';\n\n// --- Constants ---\nconst BNB_CHAIN_ID = '0x61';\nconst USDT_CONTRACT_ADDRESS = '0x337610d27c682E347C9cD60BD4b3b107C9d34dDd';\nconst API_BASE_URL = 'http://localhost:3001';\nconst usdtABI = [\n    \"function approve(address spender, uint256 amount) public returns (bool)\",\n    \"function allowance(address owner, address spender) public view returns (uint256)\",\n    \"function balanceOf(address account) public view returns (uint256)\",\n    \"function transfer(address to, uint256 amount) public returns (bool)\",\n    \"function transferFrom(address from, address to, uint256 amount) public returns (bool)\",\n    \"function name() public view returns (string)\",\n    \"function symbol() public view returns (string)\",\n    \"function decimals() public view returns (uint8)\"\n];\nconst lotteryABI = lotteryABIFile.abi;\n\n// --- Type Definitions ---\ndeclare global { interface Window { ethereum?: any; }}\n\ninterface LogEntry {\n    id: number;\n    type: 'JOIN' | 'SYSTEM' | 'WINNER' | 'ERROR' | 'INFO' | 'PROCESS';\n    message: string;\n    timestamp: string;\n}\n\ninterface LotteryRound {\n    id: number; // This is now the room_round_id\n    globalRoundId: number;\n    deadline: string; // Add deadline to the type\n    status: 'OPEN' | 'DRAWING' | 'CLOSED';\n    players: string[];\n    players_snapshot: string | null;\n    winner: string | null;\n    prizePool: string | null;\n    logs: LogEntry[];\n    // These are added from the backend's room config\n    name: string;\n    ticketPrice: string;\n    contractAddress: string;\n}\n\ninterface RoomConfig {\n    name: string;\n    ticketPrice: string;\n    contractAddress: string;\n}\n\n// --- Main Component ---\nexport default function RoomPage() {\n    const params = useParams();\n    const router = useRouter();\n    const roomId = params.roomId as string;\n\n    const [account, setAccount] = useState<string | null>(null);\n    const [isCorrectNetwork, setIsCorrectNetwork] = useState(false);\n    const [isOwner, setIsOwner] = useState(false);\n    const [isProcessing, setIsProcessing] = useState(false);\n    const [lotteryStatus, setLotteryStatus] = useState<LotteryRound | null>(null);\n    const [roomConfig, setRoomConfig] = useState<RoomConfig | null>(null);\n    const [displayedLogs, setDisplayedLogs] = useState<LogEntry[]>([]);\n    const [error, setError] = useState<string | null>(null);\n    const [isAnimationRunning, setIsAnimationRunning] = useState(false);\n    const [hasAnimationRun, setHasAnimationRun] = useState(false);\n    const [isMyPageVisible, setIsMyPageVisible] = useState(false);\n    const [pastWinners, setPastWinners] = useState<{ global_round_id: number; winner: string }[]>([]);\n    const [timeLeft, setTimeLeft] = useState<string>(\"--:--:--\");\n\n    const prevRoundIdRef = useRef<number | null>(null);\n    const logContainerRef = useRef<HTMLDivElement>(null);\n\n    useEffect(() => {\n        if (lotteryStatus && lotteryStatus.globalRoundId !== prevRoundIdRef.current) {\n            setHasAnimationRun(false);\n            prevRoundIdRef.current = lotteryStatus.globalRoundId;\n        }\n    }, [lotteryStatus]);\n\n    useEffect(() => {\n        if (!lotteryStatus?.deadline || lotteryStatus.status !== 'OPEN') {\n            setTimeLeft(\"--:--:--\");\n            return;\n        }\n\n        const interval = setInterval(() => {\n            const now = new Date();\n            const deadlineTime = new Date(lotteryStatus.deadline);\n            const diff = deadlineTime.getTime() - now.getTime();\n\n            if (diff <= 0) {\n                setTimeLeft(\"00:00:00\");\n                clearInterval(interval);\n                // Optionally trigger a status refresh\n                fetchStatus();\n                return;\n            }\n\n            const hours = Math.floor(diff / (1000 * 60 * 60));\n            const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));\n            const seconds = Math.floor((diff % (1000 * 60)) / 1000);\n            \n            setTimeLeft(\n                `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`\n            );\n        }, 1000);\n\n        return () => clearInterval(interval);\n    }, [lotteryStatus]);\n\n    useEffect(() => {\n        if (logContainerRef.current) {\n            logContainerRef.current.scrollTop = logContainerRef.current.scrollHeight;\n        }\n    }, [displayedLogs]);\n\n    const addFrontendLog = useCallback((type: LogEntry['type'], message: string) => {\n        const newLog: LogEntry = { id: Math.random() * -100000, type, message, timestamp: new Date().toISOString() };\n        setDisplayedLogs(prev => [...prev, newLog]);\n    }, []);\n\n    const fetchStatus = useCallback(async () => {\n        if (isAnimationRunning || !roomId) return;\n        try {\n            const response = await fetch(`${API_BASE_URL}/lottery-status/${roomId}`);\n            if (!response.ok) {\n                const errorData = await response.json();\n                throw new Error(errorData.message || 'Failed to fetch lottery status.');\n            }\n            const data: LotteryRound = await response.json();\n            setLotteryStatus(data);\n\n            if (!roomConfig) {\n                setRoomConfig({\n                    name: data.name,\n                    ticketPrice: data.ticketPrice,\n                    contractAddress: data.contractAddress,\n                });\n            }\n\n            setDisplayedLogs(prevLogs => {\n                const existingIds = new Set(prevLogs.map(l => l.id));\n                let newLogs = data.logs.filter(log => !existingIds.has(log.id));\n                if (data.status === 'DRAWING' || isAnimationRunning) {\n                   newLogs = newLogs.filter(log => log.type !== 'WINNER');\n                }\n                return [...prevLogs, ...newLogs].sort((a,b) => new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime());\n            });\n        } catch (error: any) {\n            setError(error.message);\n        }\n    }, [isAnimationRunning, roomId, roomConfig]);\n\n    const checkNetwork = useCallback(async () => {\n        if (window.ethereum) {\n            const chainId = await window.ethereum.request({ method: 'eth_chainId' });\n            setIsCorrectNetwork(chainId === BNB_CHAIN_ID);\n        }\n    }, []);\n\n    const checkOwner = useCallback(async (currentAccount: string) => {\n        if (window.ethereum && currentAccount && isCorrectNetwork && roomConfig?.contractAddress) {\n            const provider = new ethers.BrowserProvider(window.ethereum);\n            const contract = new ethers.Contract(roomConfig.contractAddress, lotteryABI, provider);\n            try {\n                const ownerAddress = await contract.owner();\n                setIsOwner(ownerAddress.toLowerCase() === currentAccount.toLowerCase());\n            } catch (e) {\n                console.error(\"Couldn't check owner status: \", e);\n                setIsOwner(false);\n            }\n        } else {\n            setIsOwner(false);\n        }\n    }, [isCorrectNetwork, roomConfig]);\n\n    useEffect(() => {\n        const handleAccountsChanged = (accounts: string[]) => {\n            const newAccount = accounts.length > 0 ? accounts[0] : null;\n            setAccount(newAccount);\n        };\n        if (window.ethereum) {\n            window.ethereum.on('accountsChanged', handleAccountsChanged);\n            window.ethereum.on('chainChanged', checkNetwork);\n            (async () => {\n                const accounts = await window.ethereum.request({ method: 'eth_accounts' });\n                handleAccountsChanged(accounts);\n                await checkNetwork();\n            })();\n            return () => {\n                window.ethereum.removeListener('accountsChanged', handleAccountsChanged);\n                window.ethereum.removeListener('chainChanged', checkNetwork);\n            };\n        }\n    }, [checkNetwork]);\n\n    useEffect(() => {\n        if (account && isCorrectNetwork && roomConfig) {\n            checkOwner(account);\n        } else {\n            setIsOwner(false);\n        }\n    }, [account, isCorrectNetwork, roomConfig, checkOwner]);\n    \n    useEffect(() => {\n        if (lotteryStatus?.status === 'DRAWING' && !isAnimationRunning && !hasAnimationRun) {\n            setIsAnimationRunning(true);\n            setHasAnimationRun(true);\n            const runDrawingSequence = async () => {\n                addFrontendLog('SYSTEM', 'Draw starting in 3...');\n                await new Promise(res => setTimeout(res, 1000));\n                addFrontendLog('SYSTEM', 'Draw starting in 2...');\n                await new Promise(res => setTimeout(res, 1000));\n                addFrontendLog('SYSTEM', 'Draw starting in 1...');\n                await new Promise(res => setTimeout(res, 1000));\n                \n                const players = lotteryStatus.players_snapshot ? JSON.parse(lotteryStatus.players_snapshot) : [];\n                if (players.length > 0) {\n                    const animationDuration = 5000;\n                    const startTime = Date.now();\n                    const animationInterval = setInterval(() => {\n                         if (Date.now() - startTime > animationDuration) {\n                            clearInterval(animationInterval);\n                            const closeRound = async () => {\n                                addFrontendLog('SYSTEM', 'Verification complete. Announcing winner...');\n                                const winnerLog = lotteryStatus.logs.find(l => l.type === 'WINNER');\n                                if (winnerLog) setDisplayedLogs(prev => [...prev, winnerLog]);\n                                else if (lotteryStatus.winner) addFrontendLog('WINNER', `🎉 Congratulations to the winner: ${lotteryStatus.winner}`);\n                                await new Promise(res => setTimeout(res, 3000));\n                                addFrontendLog('SYSTEM', 'This round is now closed. A new round will begin shortly.');\n                                for (let i = 5; i > 0; i--) {\n                                    addFrontendLog('SYSTEM', `Clearing board in ${i}...`);\n                                    await new Promise(res => setTimeout(res, 1000));\n                                }\n                                setDisplayedLogs([]);\n                                setIsAnimationRunning(false);\n                            };\n                            closeRound();\n                        } else {\n                            const randomIndex = Math.floor(Math.random() * players.length);\n                            addFrontendLog('PROCESS', `Verifying: ${players[randomIndex]}`);\n                        }\n                    }, 10);\n                } else {\n                     addFrontendLog('ERROR', 'No participants in the draw.');\n                     setIsAnimationRunning(false);\n                }\n            };\n            runDrawingSequence();\n        }\n    }, [lotteryStatus, isAnimationRunning, hasAnimationRun, addFrontendLog]);\n\n    useEffect(() => {\n        const fetchWinners = async () => {\n            if (!roomId) return;\n            try {\n                const response = await fetch(`${API_BASE_URL}/winners/${roomId}`);\n                if (!response.ok) {\n                    throw new Error('Failed to fetch winners');\n                }\n                const data = await response.json();\n                setPastWinners(data);\n            } catch (error) {\n                console.error(\"Error fetching past winners:\", error);\n                // Optionally set an error state here to show in the UI\n            }\n        };\n        fetchWinners();\n    }, [roomId]);\n\n    useEffect(() => {\n        fetchStatus();\n        const interval = setInterval(() => {\n            if (!isAnimationRunning) fetchStatus();\n        }, 3000);\n        return () => clearInterval(interval);\n    }, [fetchStatus, isAnimationRunning]);\n\n    const connectWallet = async () => {\n        if (!window.ethereum) return setError('Please install MetaMask.');\n        try {\n            const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n            setAccount(accounts[0]);\n        } catch (error) { setError('Failed to connect wallet.'); }\n    };\n\n    const handleOpenMyPage = () => {\n        if (account) {\n          setIsMyPageVisible(true);\n        } else {\n          alert('Please connect your wallet first.');\n        }\n    };\n\n    const handleParticipate = async () => {\n        if (!account || !isCorrectNetwork || !roomConfig) return;\n        setIsProcessing(true);\n        setError(null);\n        try {\n            const provider = new ethers.BrowserProvider(window.ethereum);\n            const signer = await provider.getSigner();\n            const usdtContract = new ethers.Contract(USDT_CONTRACT_ADDRESS, usdtABI, signer);\n            const lotteryContract = new ethers.Contract(roomConfig.contractAddress, lotteryABI, signer);\n            const participationFee = ethers.parseUnits(roomConfig.ticketPrice, 18);\n            \n            const balance = await usdtContract.balanceOf(account);\n            if (balance < participationFee) throw new Error(`Insufficient USDT balance.`);\n            \n            const allowance = await usdtContract.allowance(account, roomConfig.contractAddress);\n            if (allowance < participationFee) {\n                const approveTx = await usdtContract.approve(roomConfig.contractAddress, ethers.MaxUint256);\n                await approveTx.wait();\n            }\n            \n            const participateTx = await lotteryContract.participate();\n            await participateTx.wait();\n            \n            await fetch(`${API_BASE_URL}/participate/${roomId}`, {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({ userAddress: account })\n            });\n            await fetchStatus();\n        } catch (error: any) {\n            setError(`Participation failed: ${error.reason || error.message}`);\n        } finally {\n            setIsProcessing(false);\n        }\n    };\n    \n    return (\n        <div className=\"bg-[#1a1a2e] min-h-screen text-white font-sans bg-[url('/bg.png')] bg-[length:100%_100%] bg-fixed\">\n            <Header account={account} connectWallet={connectWallet} />\n\n            {isProcessing && (\n                <div className=\"absolute inset-0 bg-black bg-opacity-70 flex flex-col justify-center items-center z-50\">\n                    <div className=\"w-16 h-16 border-4 border-yellow-400 border-t-transparent rounded-full animate-spin\"></div>\n                    <p className=\"mt-4 text-white text-xl font-semibold\">Processing Transaction...</p>\n                </div>\n            )}\n\n            {/* Global Round Bar */}\n            <div className=\"text-center py-3 bg-gradient-to-r from-[#143892] to-[#0E369D] border-y border-[#33B8D7]\">\n                <h2 className=\"text-2xl font-bold\">Global Round #{lotteryStatus?.globalRoundId || '...'}</h2>\n            </div>\n\n            <main className=\"flex w-full gap-8 p-8\">\n                {/* Left Column */}\n                <div className=\"w-1/3 flex flex-col gap-4 p-4 bg-black/30 rounded-lg border border-gray-700\">\n                    <h1 className=\"text-3xl font-bold text-center\">{roomConfig?.name || 'Loading Room...'}</h1>\n                    \n                    {/* Timer placeholder */}\n                    <div className=\"text-5xl text-center font-mono py-2 text-cyan-400\">\n                        {timeLeft}\n                    </div>\n\n                    {error && <p className=\"text-red-500 text-xs my-1 text-center\">{error}</p>}\n                    \n                    <button\n                        onClick={handleParticipate}\n                        disabled={isProcessing || lotteryStatus?.status !== 'OPEN' || !account || !isCorrectNetwork}\n                        className=\"w-full text-white font-bold p-3 rounded-lg border-2 border-cyan-400 bg-black/50 hover:bg-cyan-400/20 disabled:bg-gray-700 disabled:border-gray-500 disabled:text-gray-400\"\n                    >\n                        {lotteryStatus?.status === 'OPEN' && roomConfig ? `Participate (${roomConfig.ticketPrice} USDT)` : `Round is ${lotteryStatus?.status || 'Loading...'}`}\n                    </button>\n\n                    {/* Participants list */}\n                    <div className=\"flex flex-col\">\n                        <h2 className=\"text-lg font-bold mb-2\">Participants ({lotteryStatus?.players?.length || 0})</h2>\n                        <div className=\"bg-black/20 rounded p-2 h-48 overflow-y-auto border border-gray-800\">\n                            {lotteryStatus?.players?.map((player, index) => <div key={index} className=\"text-sm truncate font-mono text-green-400\">{player}</div>)}\n                        </div>\n                    </div>\n\n                    {/* Past Winners list placeholder */}\n                    <div className=\"flex flex-col\">\n                        <h2 className=\"text-lg font-bold mt-2 mb-2\">🏆 Round 우승자</h2>\n                        <div className=\"bg-black/20 rounded p-2 h-48 overflow-y-auto border border-gray-800\">\n                            {pastWinners.length > 0 ? (\n                                pastWinners.map((winner, index) => (\n                                    <div key={index} className=\"flex justify-between items-center text-sm py-1\">\n                                        <span>Round {winner.global_round_id}</span>\n                                        <span className=\"font-mono\">{`${winner.winner.substring(0, 6)}...${winner.winner.slice(-4)}`}</span>\n                                    </div>\n                                ))\n                            ) : (\n                                <div className=\"text-sm text-gray-500 text-center py-1\">No recent winners.</div>\n                            )}\n                        </div>\n                        <div className=\"flex justify-end gap-2 mt-2\">\n                            <button className=\"text-lg hover:text-cyan-400\">◀</button>\n                            <button className=\"text-lg hover:text-cyan-400\">▶</button>\n                        </div>\n                    </div>\n                </div>\n\n                {/* Right Column */}\n                <div className=\"w-2/3 flex flex-col gap-4\">\n                    <div className=\"text-2xl font-bold text-yellow-400 p-4 bg-black/30 rounded-lg border border-gray-700 flex items-center gap-2\">\n                        <span>T</span>\n                        <span>Prize Pool: <span className=\"font-mono\">{parseFloat(lotteryStatus?.prizePool || '0').toFixed(4)}</span> USDT</span>\n                    </div>\n                    \n                    <div ref={logContainerRef} className=\"flex-grow rounded-lg p-4 bg-black/80 font-mono text-sm overflow-y-auto border border-gray-700 h-full\">\n                        {displayedLogs.map((log, i) => (\n                            <div key={log.id || i} className={`${\n                                log.type === 'WINNER' ? 'text-yellow-400 font-bold text-lg' \n                                : log.type === 'ERROR' ? 'text-red-500' \n                                : log.type === 'JOIN' ? 'text-blue-400'\n                                : log.type === 'PROCESS' ? 'text-green-400'\n                                : 'text-gray-400'\n                            }`}>\n                                <span className=\"text-gray-600 mr-2\">{new Date(log.timestamp).toLocaleTimeString()}</span>\n                                <span>{log.message}</span>\n                            </div>\n                        ))}\n                    </div>\n                </div>\n            </main>\n\n            <SideMenu onOpenMyPage={handleOpenMyPage} />\n\n            {isMyPageVisible && account && (\n                <MyPageModal\n                    account={account}\n                    onClose={() => setIsMyPageVisible(false)}\n                />\n            )}\n        </div>\n    );\n} "],"names":[],"mappings":"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","debugId":null}}]
}